define(["require", "exports", "kramed", "moment", "numeral"], function (require, exports, kramed, moment, numeral) {
    "use strict";
    Object.defineProperty(exports, "__esModule", { value: true });
    var UIFormat;
    (function (UIFormat) {
        function toHTML(md) {
            return kramed(md).replace(/(\<a href=)/gi, '<a target="_blank" href=');
        }
        UIFormat.toHTML = toHTML;
        function date(dt, ft) {
            if (ft === void 0) { ft = 'DD MMM YYYY'; }
            var x;
            return !dt || !(x = moment(dt)).isValid() ? null : x.format(ft);
        }
        UIFormat.date = date;
        function time(dt, ft) {
            if (ft === void 0) { ft = 'hh:mm A'; }
            var x;
            return !dt || !(x = moment(dt)).isValid() ? null : x.format(ft);
        }
        UIFormat.time = time;
        function datetime(dt, ft) {
            if (ft === void 0) { ft = 'DD MMM YYYY hh:mm A'; }
            var x;
            return !dt || !(x = moment(dt)).isValid() ? null : x.format(ft);
        }
        UIFormat.datetime = datetime;
        function dateToISO(dt) {
            var x;
            return !dt || !(x = moment(dt)).isValid() ? null : x.toISOString();
        }
        UIFormat.dateToISO = dateToISO;
        function utcDate(dt) {
            var x;
            return !dt || !(x = moment(dt)).isValid() ? null : x.utc();
        }
        UIFormat.utcDate = utcDate;
        function age(dt) {
            var x;
            return !dt || !(x = moment(dt)).isValid() ? '' : x.fromNow(true);
        }
        UIFormat.age = age;
        function fromNow(dt) {
            var x;
            return !dt || !(x = moment(dt)).isValid() ? '' : x.fromNow(false);
        }
        UIFormat.fromNow = fromNow;
        function number(nm, fm) {
            if (fm === void 0) { fm = '0,0[.]00'; }
            var ret = nm === null || isNaN(nm) ? '' : numeral(nm).format(fm);
            if (fm.indexOf('{') === 0) {
                var minlen = fm.length - 2;
                if (ret.length < minlen) {
                    ret = Array(minlen - ret.length + 1).join('0') + ret;
                }
            }
            return ret;
        }
        UIFormat.number = number;
        function currency(nm, sy, fm) {
            if (sy === void 0) { sy = '$'; }
            if (fm === void 0) { fm = '$ 0,0.00'; }
            return nm === null || isNaN(nm) ? '' :
                numeral(nm)
                    .format(fm)
                    .replace('$', sy);
        }
        UIFormat.currency = currency;
        function percent(nm) {
            return nm === null || isNaN(nm) ? '' :
                numeral(nm > 1 ? nm / 100 : nm)
                    .format('0.00%');
        }
        UIFormat.percent = percent;
        function exRate(nm) {
            return nm === null || isNaN(nm) ? '' :
                numeral(nm > 0 ? 1 / nm : nm)
                    .format('0.0000[a]');
        }
        UIFormat.exRate = exRate;
    })(UIFormat = exports.UIFormat || (exports.UIFormat = {}));
});

//# sourceMappingURL=data:application/json;charset=utf8;base64,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QztxQkFDUixNQUFNLENBQUMsRUFBRSxDQUFDO3FCQUNWLE9BQU8sQ0FBQyxHQUFHLEVBQUUsRUFBRSxDQUFDLENBQUM7UUFDeEIsQ0FBQztRQUxlLGlCQUFRLFdBS3ZCLENBQUE7UUFFRCxpQkFBd0IsRUFBTztZQUM3QixNQUFNLENBQUMsRUFBRSxLQUFLLElBQUksSUFBSSxLQUFLLENBQUMsRUFBRSxDQUFDLENBQUMsQ0FBQyxDQUFDLEVBQUUsQ0FBQyxDQUFDO2dCQUNwQyxPQUFPLENBQUMsRUFBRSxHQUFHLENBQUMsQ0FBQyxDQUFDLENBQUMsRUFBRSxHQUFHLEdBQUcsQ0FBQyxDQUFDLENBQUMsRUFBRSxDQUFDO3FCQUM1QixNQUFNLENBQUMsT0FBTyxDQUFDLENBQUM7UUFDdkIsQ0FBQztRQUplLGdCQUFPLFVBSXRCLENBQUE7UUFFRCxnQkFBdUIsRUFBTztZQUM1QixNQUFNLENBQUMsRUFBRSxLQUFLLElBQUksSUFBSSxLQUFLLENBQUMsRUFBRSxDQUFDLENBQUMsQ0FBQyxDQUFDLEVBQUUsQ0FBQyxDQUFDO2dCQUNwQyxPQUFPLENBQUMsRUFBRSxHQUFHLENBQUMsQ0FBQyxDQUFDLENBQUMsQ0FBQyxHQUFHLEVBQUUsQ0FBQyxDQUFDLENBQUMsRUFBRSxDQUFDO3FCQUMxQixNQUFNLENBQUMsV0FBVyxDQUFDLENBQUM7UUFDM0IsQ0FBQztRQUplLGVBQU0sU0FJckIsQ0FBQTtJQUNILENBQUMsRUF2RWEsUUFBUSxHQUFSLGdCQUFRLEtBQVIsZ0JBQVEsUUF1RXJCIiwiZmlsZSI6InV0aWxzL3VpLWZvcm1hdC5qcyIsInNvdXJjZXNDb250ZW50IjpbIi8vXG4vLyBAZGVzY3JpcHRpb24gOlxuLy8gQGF1dGhvciAgICAgIDogQWRhcnNoIFBhc3Rha2lhXG4vLyBAY29weXJpZ2h0ICAgOiAyMDE2XG4vLyBAbGljZW5zZSAgICAgOiBNSVRcblxuaW1wb3J0ICogYXMga3JhbWVkIGZyb20gXCJrcmFtZWRcIjtcbmltcG9ydCAqIGFzIG1vbWVudCBmcm9tIFwibW9tZW50XCI7XG5pbXBvcnQgKiBhcyBudW1lcmFsIGZyb20gXCJudW1lcmFsXCI7XG5cbmV4cG9ydCBtb2R1bGUgVUlGb3JtYXQge1xuICBleHBvcnQgZnVuY3Rpb24gdG9IVE1MKG1kKSB7XG4gICAgcmV0dXJuIGtyYW1lZChtZCkucmVwbGFjZSgvKFxcPGEgaHJlZj0pL2dpLCAnPGEgdGFyZ2V0PVwiX2JsYW5rXCIgaHJlZj0nKTtcbiAgfVxuXG4gIC8vIERhdGVzXG4gIGV4cG9ydCBmdW5jdGlvbiBkYXRlKGR0OiBhbnksIGZ0OiBzdHJpbmcgPSAnREQgTU1NIFlZWVknKSB7XG4gICAgbGV0IHg7XG4gICAgcmV0dXJuICFkdCB8fCAhKHggPSBtb21lbnQoZHQpKS5pc1ZhbGlkKCkgPyBudWxsIDogeC5mb3JtYXQoZnQpO1xuICB9XG5cbiAgZXhwb3J0IGZ1bmN0aW9uIHRpbWUoZHQ6IGFueSwgZnQ6IHN0cmluZyA9ICdoaDptbSBBJykge1xuICAgIGxldCB4O1xuICAgIHJldHVybiAhZHQgfHwgISh4ID0gbW9tZW50KGR0KSkuaXNWYWxpZCgpID8gbnVsbCA6IHguZm9ybWF0KGZ0KTtcbiAgfVxuXG4gIGV4cG9ydCBmdW5jdGlvbiBkYXRldGltZShkdDogYW55LCBmdDogc3RyaW5nID0gJ0REIE1NTSBZWVlZIGhoOm1tIEEnKSB7XG4gICAgbGV0IHg7XG4gICAgcmV0dXJuICFkdCB8fCAhKHggPSBtb21lbnQoZHQpKS5pc1ZhbGlkKCkgPyBudWxsIDogeC5mb3JtYXQoZnQpO1xuICB9XG5cbiAgZXhwb3J0IGZ1bmN0aW9uIGRhdGVUb0lTTyhkdCkge1xuICAgIGxldCB4O1xuICAgIHJldHVybiAhZHQgfHwgISh4ID0gbW9tZW50KGR0KSkuaXNWYWxpZCgpID8gbnVsbCA6IHgudG9JU09TdHJpbmcoKTtcbiAgfVxuXG4gIGV4cG9ydCBmdW5jdGlvbiB1dGNEYXRlKGR0KSB7XG4gICAgbGV0IHg7XG4gICAgcmV0dXJuICFkdCB8fCAhKHggPSBtb21lbnQoZHQpKS5pc1ZhbGlkKCkgPyBudWxsIDogeC51dGMoKTtcbiAgfVxuXG4gIGV4cG9ydCBmdW5jdGlvbiBhZ2UoZHQ6IGFueSk6IHN0cmluZyB7XG4gICAgbGV0IHg7XG4gICAgcmV0dXJuICFkdCB8fCAhKHggPSBtb21lbnQoZHQpKS5pc1ZhbGlkKCkgPyAnJyA6IHguZnJvbU5vdyh0cnVlKTtcbiAgfVxuXG4gIGV4cG9ydCBmdW5jdGlvbiBmcm9tTm93KGR0OiBhbnkpOiBzdHJpbmcge1xuICAgIGxldCB4O1xuICAgIHJldHVybiAhZHQgfHwgISh4ID0gbW9tZW50KGR0KSkuaXNWYWxpZCgpID8gJycgOiB4LmZyb21Ob3coZmFsc2UpO1xuICB9XG5cbiAgLy8gTnVtYmVyc1xuICBleHBvcnQgZnVuY3Rpb24gbnVtYmVyKG5tOiBhbnksIGZtOiBzdHJpbmcgPSAnMCwwWy5dMDAnKTogc3RyaW5nIHtcbiAgICBsZXQgcmV0ID0gbm0gPT09IG51bGwgfHwgaXNOYU4obm0pID8gJycgOiBudW1lcmFsKG5tKS5mb3JtYXQoZm0pO1xuICAgIGlmIChmbS5pbmRleE9mKCd7JykgPT09IDApIHtcbiAgICAgIGxldCBtaW5sZW4gPSBmbS5sZW5ndGggLSAyO1xuICAgICAgaWYgKHJldC5sZW5ndGggPCBtaW5sZW4pIHtcbiAgICAgICAgcmV0ID0gQXJyYXkobWlubGVuIC0gcmV0Lmxlbmd0aCArIDEpLmpvaW4oJzAnKSArIHJldDtcbiAgICAgIH1cbiAgICB9XG4gICAgcmV0dXJuIHJldDtcbiAgfVxuXG4gIGV4cG9ydCBmdW5jdGlvbiBjdXJyZW5jeShubTogYW55LCBzeTogc3RyaW5nID0gJyQnLCBmbTogc3RyaW5nID0gJyQgMCwwLjAwJyk6IHN0cmluZyB7XG4gICAgcmV0dXJuIG5tID09PSBudWxsIHx8IGlzTmFOKG5tKSA/ICcnIDpcbiAgICAgIG51bWVyYWwobm0pXG4gICAgICAgIC5mb3JtYXQoZm0pXG4gICAgICAgIC5yZXBsYWNlKCckJywgc3kpO1xuICB9XG5cbiAgZXhwb3J0IGZ1bmN0aW9uIHBlcmNlbnQobm06IGFueSk6IHN0cmluZyB7XG4gICAgcmV0dXJuIG5tID09PSBudWxsIHx8IGlzTmFOKG5tKSA/ICcnIDpcbiAgICAgIG51bWVyYWwobm0gPiAxID8gbm0gLyAxMDAgOiBubSlcbiAgICAgICAgLmZvcm1hdCgnMC4wMCUnKTtcbiAgfVxuXG4gIGV4cG9ydCBmdW5jdGlvbiBleFJhdGUobm06IGFueSk6IHN0cmluZyB7XG4gICAgcmV0dXJuIG5tID09PSBudWxsIHx8IGlzTmFOKG5tKSA/ICcnIDpcbiAgICAgIG51bWVyYWwobm0gPiAwID8gMSAvIG5tIDogbm0pXG4gICAgICAgIC5mb3JtYXQoJzAuMDAwMFthXScpO1xuICB9XG59XG4iXSwic291cmNlUm9vdCI6InNyYyJ9
